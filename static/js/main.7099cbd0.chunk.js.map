{"version":3,"sources":["index.js"],"names":["numToCard","n","value","text","suit","Math","floor","color","getShuffled","a","Array","keys","i","length","j","random","TurnedCard","props","p","className","style","LastTurned","Deck","onClick","Cards","cards","index","turnedCards","push","key","lastCard","high","Bets","bet","incBet","decBet","total","Game","state","inc","this","setState","outcome","console","log","previous","current","setTimeout","updateBank","deckClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7099cbd0.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction numToCard(n){\n  const values = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];\n  const suits = ['❤', '♠', '♦','♣'];\n  const color = ['red', 'black', 'red', 'black'];\n  const card = {\n    value: n,\n    text: values[n%13],\n    suit: suits[Math.floor(n/13)],\n    color: color[Math.floor(n/13)],\n  };\n  return card;\n}\n\nfunction getShuffled(){\n  var a = [...Array(52).keys()];\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction TurnedCard(props){\n  const p = numToCard(props.value);\n  return (\n    <div className='tcard'>\n      <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n      <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n    </div>\n  );\n}\n\nfunction LastTurned(props){\n  const p = numToCard(props.value);\n  return (\n    <div className='lcard'>\n      <div className='pipValue'>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n      </div>\n      <div className='pipValue upSideDown'>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n      </div>\n    </div>\n  );\n}\n\nfunction Deck(props){\n  const upArrow = '🔺'; //to supess warnings \n  const downArrow = '🔻';\n  return(\n    <div className='deck'>\n      <div className='bet' onClick={()=>props.onClick(true)}> <p className='bet-p'> { upArrow } </p> </div>\n      <div className='bet' onClick={()=>props.onClick(false)}> <p className='bet-p'> { downArrow } </p> </div>\n    </div>\n  );\n}\n\nfunction Cards(props){\n  const cards = props.cards;\n  const index = props.index;\n  var turnedCards = [];\n  for(let i = 0; i<index; i++){\n    turnedCards.push(<TurnedCard key = {i} value= { cards[i] } />);\n  }\n  const lastCard = index === -1 ? null : <LastTurned value= { cards[index] } />;\n\n  return (\n    <div className='cards'>\n      <Deck \n        onClick={(high)=>props.onClick(high)}\n      />\n      { turnedCards }\n      { lastCard }\n    </div>\n  );\n}\n\nfunction Bets(props){\n  return (\n    <div className='bets'>\n      <div className='hbox'>\n        <p className='bet-p'> { props.bet } </p>\n        <div className='btn' onClick={()=>props.incBet()}> <p className='bet-p'> + </p></div>\n        <div className='btn' onClick={()=>props.decBet()}> <p className='bet-p'> - </p></div>\n      </div>\n      <div className='hbox'>\n        <p className='bet-p'> total: { props.total } $ </p>\n      </div>\n    </div>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      index: 0,\n      cards: getShuffled(),\n      bet: 10,\n      total: 90,\n    }\n  }\n\n  incBet(){\n    var inc = this.state.total < 5 ? this.state.total : 5;\n    this.setState({\n      bet: this.state.bet+inc,\n      total: this.state.total-inc,\n    });\n  }\n\n  decBet(){\n    if(this.state.bet <= 10){\n      return;\n    }\n    this.setState({\n      bet: this.state.bet-5,\n      total: this.state.total+5,\n    });\n  }\n\n  updateBank(outcome){\n    if(outcome){\n      this.setState({ \n        total: this.state.total+this.state.bet,\n      });\n    }\n    else{\n      this.setState({\n        index: 0,\n        cards: getShuffled(),\n      })\n      var bet = this.state.bet;\n      var total = this.state.total;\n      if(total >= 2*bet){\n        this.setState({\n          total: total-bet,\n          bet: bet,\n        })\n      }\n      else if(total < 10){\n        this.setState({\n          total: total,\n          bet: 0,\n        })\n        console.log('minimum bet is 10');\n      }\n      else{\n        this.setState({\n          total: total-10,\n          bet: 10,\n        })\n      }\n    }\n  }\n\n  deckClick(high){\n    if(this.state.index >= 51){\n      console.log('deck is empy');\n      return;\n    }\n    const decider = high ?  (previous, current) => { return current > previous } \n                         :  (previous, current) => { return current < previous };\n    const pCard = this.state.cards[this.state.index] % 13;\n    const cCard = this.state.cards[this.state.index+1] % 13;\n\n    const outcome = decider(pCard, cCard);\n    console.log(outcome ? 'keep going' : 'unlucky');\n    this.setState({ index: this.state.index + 1 });\n    setTimeout(()=>{this.updateBank(outcome)}, outcome ? 0 : 1000);\n  }\n\n  render(){\n    return (\n      <div className='game'>\n        <Cards \n          index = { this.state.index }\n          cards = { this.state.cards }\n          onClick={ (high) => this.deckClick(high) }\n        />\n        <Bets \n          bet = { this.state.bet }\n          total = { this.state.total }\n          incBet = { () => this.incBet() }\n          decBet = { () => this.decBet() }\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}