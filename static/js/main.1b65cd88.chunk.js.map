{"version":3,"sources":["images/deck.png","components/Game.js","components/Connector.js","reducers/GameReducer.js","index.js"],"names":["module","exports","log_msg","msg","color","logd","document","getElementById","logp","style","opacity","innerText","setTimeout","getShuffled","a","Array","keys","i","length","j","Math","floor","random","numToCard","n","value","text","suit","TurnedCard","props","p","arrow","guess","className","LastTurned","cName","outcome","Deck","onClick","Cards","cards","index","turnedCards","guesses","push","key","lastTurned","high","inGameMoney","collect","Controls","newGame","bet","incBet","decBet","total","reset","GameCanvas","this","refs","deckImg","onload","draw_cards","clearCanvas","ref","getContext","clearRect","width","height","draw_card","CardNumber","DestinationX","DestinationY","ctx","sx","sy","drawImage","sWidth","sHeight","src","deckImage","alt","React","Component","Game","previous","current","pCard","cCard","setGlow","updateBank","deckClick","id","connect","state","dispatch","type","doubleBet","persistConfig","storage","persistedReducer","persistReducer","action","inc","concat","store","createStore","persistor","persistStore","subscribe","render","loading"],"mappings":"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","file":"static/js/main.1b65cd88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deck.68ee077c.png\";","import React from 'react';\nimport {connect} from 'react-redux';\nimport './Game.css';\nimport {mapDispatchToProps, mapStateToProps} from './Connector';\nimport deckImage from '../images/deck.png';\n\nexport function log_msg(msg, color){\n    var logd = document.getElementById('logger-div');\n    var logp = document.getElementById('logger-p');\n    logd.style.opacity = 0;\n    logp.style.color = color;\n    logp.innerText = msg;\n    logd.style.opacity = 1;\n    if(color === 'black') return;\n    setTimeout(() => { logd.style.opacity = 0; }, 2000);\n}\n\nexport function getShuffled(){\n  var a = [...Array(52).keys()];\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction numToCard(n){\n  const values = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];\n  const suits = ['‚ù§', '‚ô¶', '‚ô†', '‚ô£'];\n  const color = ['red', 'red', 'black', 'black'];\n  const card = {\n    value: n,\n    text: values[n%13],\n    suit: suits[Math.floor(n/13)],\n    color: color[Math.floor(n/13)],\n  };\n  return card;\n}\n\nfunction TurnedCard(props){\n  const p = numToCard(props.value);\n  const arrow = (props.guess === null) ? '' : (props.guess ? `üî∫` : `üîª`);\n  \n  return (\n    <div className='tcard'>\n      <div className='vbox'>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n      </div>\n      <div className='vbox'>\n        <p className='card-p'> { arrow } </p>\n      </div>\n    </div>\n  );\n}\n\nfunction LastTurned(props){\n  const p = numToCard(props.value);\n  const cName = 'lcard ' + props.outcome;\n  return (\n    <div className={cName}>\n      <div className='pipValue'>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n      </div>\n      <div className='pipValue upSideDown'>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n      </div>\n    </div>\n  );\n}\n\nfunction Deck(props){\n  const up = 'üëÜ'; //make compiler happy\n  const down = 'üëá';\n  return(\n    <div className='deck'>\n      <div className='bet' onClick={()=>props.onClick(true)}> <p className='bet-p'>{up}</p> </div>\n      <div className='bet' onClick={()=>props.onClick(false)}> <p className='bet-p'>{down}</p> </div>\n    </div>\n  );\n}\n\nfunction Cards(props){\n  const cards = props.cards;\n  const index = props.index;\n  var turnedCards = [];\n  for(let i = 0; i<index; i++){\n    const guess = (index > 0) ? props.guesses[i] : null;\n    turnedCards.push(\n      <TurnedCard \n        key = {i} \n        value= { cards[i] } \n        guess = { guess }\n      />);\n  }\n  const lastTurned = index < 0 ? \n    null : \n    (<LastTurned \n      value = { cards[index] } \n      outcome = { props.outcome } \n    />);\n\n  return (\n    <div className='cards'>\n      <Deck \n        onClick={(high)=>props.onClick(high)}\n      />\n      { turnedCards }\n      { lastTurned }\n      <div className='vbox'>\n        <p className='bet-p'> your money: { props.inGameMoney } </p>\n        <div className='btn' onClick={()=>props.collect()}>\n          <p className='bet-p'> collect </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Controls(props){\n  return(\n    <div className='vbox'>\n      <div className='hbox'>\n        <div className='btn' onClick={()=>props.newGame()}> \n          <p className='bet-p'> new game </p>\n        </div>\n        <p className='bet-p'> bet: { props.bet } </p>\n        <div className='btn' onClick={()=>props.incBet()}> \n          <p className='bet-p'> + </p>\n        </div>\n        <div className='btn' onClick={()=>props.decBet()}> \n          <p className='bet-p'> - </p>\n        </div>\n        <p className='bet-p'> total: { props.total } üí∞</p>\n      </div>\n      <div className='btn' onClick={()=>props.reset()}>\n        <p className='bet-p'> reset </p>\n      </div>\n    </div>\n  )\n}\n\nclass GameCanvas extends React.Component {\n  componentDidMount(){\n    const img = this.refs.deckImg;\n    img.onload = () => {\n      this.draw_cards();\n    }\n  }\n\n  componentDidUpdate(){\n    this.clearCanvas();\n    this.draw_cards();\n  }\n\n  clearCanvas(){\n    const ctx = this.refs.ref.getContext('2d');\n    ctx.clearRect(0, 0, this.refs.ref.width, this.refs.ref.height);\n  }\n\n  draw_cards(){\n    for(let i=0; i<= this.props.index; i++){\n      this.draw_card(\n        this.props.cards[i], \n        i*12, \n        (i > 0) ? (this.props.guesses[i-1] ? 0 : 10) : 0\n      );\n    }\n  }\n\n  draw_card(CardNumber, DestinationX, DestinationY) {\n    const ctx = this.refs.ref.getContext('2d');\n\n    const sWidth = 64;\n    const sHeight = 96;\n    const wScale = 1;\n    const hScale = 1.5;\n    const sx = (CardNumber % 13) * sWidth;\n    const sy = Math.floor(CardNumber / 13) * sHeight;\n\n    ctx.drawImage(\n      this.refs.deckImg,\n      sx,\n      sy,\n      sWidth,\n      sHeight,\n      DestinationX,\n      DestinationY,\n      sWidth*wScale,\n      sHeight*hScale,\n    );\n  }\n  \n  render(){\n    return (\n      <div className='vbox'>\n        <canvas \n          ref='ref'\n          className='GameCanvas'\n        />\n        <img\n          ref='deckImg'\n          className='HiddenImage'\n          src={deckImage}\n          alt='deck'\n        />\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  deckClick(high){\n    if(this.props.inGameMoney === 0){\n      log_msg('start a new game', 'red');\n      return;\n    }\n    if(this.props.index >= 51){\n      log_msg('deck is empy, like this will ever happen!', 'green');\n      return;\n    }\n    const decider = (previous, current) => current !== previous && (current > previous) === high;\n    const pCard = this.props.cards[this.props.index] % 13;\n    const cCard = this.props.cards[this.props.index+1] % 13;\n\n    const outcome = decider(pCard, cCard);\n    this.props.setGlow(outcome, high);\n    this.props.updateBank(outcome);\n  }\n\n  render(){\n    return (\n      <div className='game'>\n        <div className='vbox'>\n          <Cards \n            index = { this.props.index }\n            cards = { this.props.cards }\n            outcome = { this.props.outcome }\n            onClick = { (high) => this.deckClick(high) }\n            collect = { () => this.props.collect() }\n            inGameMoney = { this.props.inGameMoney }\n            guesses = { this.props.guesses }\n          />\n        </div>\n        <GameCanvas\n          index = { this.props.index }\n          cards = { this.props.cards }\n          guesses = { this.props.guesses }\n        />\n        <Controls\n          bet = { this.props.bet }\n          total = { this.props.total }\n          incBet = { () => this.props.incBet() }\n          decBet = { () => this.props.decBet() }\n          reset = { () => this.props.reset() }\n          newGame = { () => this.props.newGame() }\n        />\n        <div className='logger-div' id='logger-div'>\n            <p className='logger-p' id='logger-p'> </p> \n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","const mapStateToProps = (state) => {\n  return {\n    index: state.index,\n    cards: state.cards,\n    bet: state.bet,\n    total: state.total,\n    outcome: state.outcome,\n    inGameMoney: state.inGameMoney,\n    guesses: state.guesses,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    reset: () => {\n      dispatch({\n        type: 'reset',\n      });\n    },\n    collect: () => {\n      dispatch({\n        type: 'collect',\n      });\n    },\n    doubleBet: () => {\n      dispatch({\n        type: 'doubleBet',\n      });\n    },\n    newGame: () => {\n      dispatch({\n        type: 'newGame',\n      });\n    },\n    decBet: () => {\n      dispatch({\n        type: 'decBet',\n      });\n    },\n    incBet: () => {\n      dispatch({\n        type: 'incBet',\n      });\n    },\n    setGlow: (outcome, guess) => {\n      dispatch({\n        type: 'setGlow',\n        outcome: outcome,\n        guess: guess,\n      });\n    },\n    updateBank: (outcome) => {\n      dispatch({\n        type: 'updateBank',\n        outcome: outcome,\n      });\n    },\n  };\n};\n\nexport {mapStateToProps, mapDispatchToProps};\n","import storage from 'redux-persist/lib/storage';\nimport {persistReducer} from 'redux-persist';\nimport {getShuffled, log_msg} from '../components/Game';\n\nconst reducer = (state = \n  {\n    index: -1,\n    bet: 10,\n    total: 90,\n    outcome: '',\n    guesses: [],\n  }, action) => {\n  switch(action.type){\n    case 'reset': {\n      state = {\n        ...state,\n        index: -1,\n        cards: getShuffled(),\n        bet: 10,\n        total: 90,\n        outcome: '',\n        inGameMoney: 0,\n        guesses: [],\n      };\n      break;\n    }\n    case 'collect': {\n      if(state.inGameMoney === 0){\n        log_msg('you have nothing to collect!', 'red');\n        break;\n      }\n      const total = state.total + state.inGameMoney;\n      state = {\n        ...state,\n        total: total,\n        inGameMoney: 0,\n      };\n      break;\n    }\n    case 'doubleBet': {\n      state = {\n        ...state,\n        inGameMoney: state.inGameMoney * 2,\n      };\n      break;\n    }\n    case 'newGame': {\n      const inGameMoney = state.bet;\n      if(inGameMoney === 0){\n        log_msg('minimum bet is 5', 'orange');\n        break;\n      }\n      if(state.inGameMoney !== 0){\n        log_msg('finish the game you started first!', 'teal');\n        break;\n      }\n      state = {\n        ...state,\n        index: 0,\n        cards: getShuffled(),\n        inGameMoney: inGameMoney,\n        outcome: '',\n        bet: 0,\n        guesses: [],\n      };\n      break;\n    }\n    case 'decBet': {\n      if(state.bet <= 10) break;\n      state = {\n        ...state,\n        bet: state.bet + 5,\n        total: state.total - 5,\n      }; \n      break;\n    }\n    case 'incBet': {\n      const inc = state.total < 5 ? state.total : 5;\n      state = {\n        ...state,\n        bet: state.bet + inc,\n        total: state.total - inc,\n      }; \n      break;\n    }\n    case 'setGlow': {\n      state = {\n        ...state,\n        index: state.index + 1,\n        outcome: action.outcome ? 'green-glow' : 'red-glow',\n        guesses: state.guesses.concat([action.guess]),\n      }; \n      break;\n    }\n    case 'updateBank': {\n      if(action.outcome){\n        state = {\n          ...state,\n          inGameMoney: state.inGameMoney * 2,\n        }; \n      }\n      else{\n        state = {\n          ...state,\n          inGameMoney: 0,\n        }; \n        log_msg('you lost this round', 'grey');\n      }\n      break;\n    }\n    default: ;\n  }\n  return state;\n};\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nexport default persistedReducer;\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {createStore} from 'redux';\nimport {persistStore} from 'redux-persist';\nimport {Provider} from 'react-redux';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport persistedReducer from './reducers/GameReducer';\nimport Game from './components/Game';\n\n\nlet store = createStore(persistedReducer);\nlet persistor = persistStore(store);\n\nstore.subscribe(()=>{});\n\nrender(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Game />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}