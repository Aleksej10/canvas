{"version":3,"sources":["deck.png","Game.js","index.js"],"names":["module","exports","log_msg","msg","color","logd","document","getElementById","logp","style","opacity","innerText","setTimeout","numToCard","n","value","text","suit","Math","floor","getShuffled","a","Array","keys","i","length","j","random","TurnedCard","props","p","arrow","guess","className","LastTurned","cName","outcome","Deck","onClick","Cards","cards","index","turnedCards","guesses","push","key","lastTurned","high","inGameMoney","collect","Controls","newGame","bet","incBet","decBet","total","reset","GameCanvas","this","refs","deckImg","onload","draw_cards","clearCanvas","y","draw_card","ref","getContext","clearRect","width","height","CardNumber","DestinationX","DestinationY","ctx","sx","sy","drawImage","sWidth","sHeight","src","deckImage","alt","React","Component","Game","previous","current","pCard","cCard","setGlow","updateBank","deckClick","id","connect","state","dispatch","type","doubleBet","lost","persistConfig","storage","persistedReducer","persistReducer","action","inc","concat","store","createStore","persistor","persistStore","subscribe","render","loading"],"mappings":"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","file":"static/js/main.7bcc5ec2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deck.68ee077c.png\";","import React from 'react';\nimport {connect} from 'react-redux';\nimport './index.css';\nimport deckImage from './deck.png';\n\nexport function log_msg(msg, color){\n    var logd = document.getElementById('logger-div');\n    var logp = document.getElementById('logger-p');\n    logd.style.opacity = 0;\n    logp.style.color = color;\n    logp.innerText = msg;\n    logd.style.opacity = 1;\n    if(color === 'black') return;\n    setTimeout(() => { logd.style.opacity = 0; }, 2000);\n}\n\nfunction numToCard(n){\n  const values = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];\n  const suits = ['❤', '♦', '♠', '♣'];\n  const color = ['red', 'red', 'black', 'black'];\n  const card = {\n    value: n,\n    text: values[n%13],\n    suit: suits[Math.floor(n/13)],\n    color: color[Math.floor(n/13)],\n  };\n  return card;\n}\n\nexport function getShuffled(){\n  var a = [...Array(52).keys()];\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction TurnedCard(props){\n  const p = numToCard(props.value);\n  const arrow = (props.guess === null) ? '' : (props.guess ? `🔺` : `🔻`);\n  \n  return (\n    <div className='tcard'>\n      <div className='vbox'>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n      </div>\n      <div className='vbox'>\n        <p className='card-p'> { arrow } </p>\n      </div>\n    </div>\n  );\n}\n\nfunction LastTurned(props){\n  const p = numToCard(props.value);\n  const cName = 'lcard ' + props.outcome;\n  return (\n    <div className={cName}>\n      <div className='pipValue'>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n      </div>\n      <div className='pipValue upSideDown'>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n      </div>\n    </div>\n  );\n}\n\nfunction Deck(props){\n  return(\n    <div className='deck'>\n      <div className='bet' onClick={()=>props.onClick(true)}> <p className='bet-p'>👆</p> </div>\n      <div className='bet' onClick={()=>props.onClick(false)}> <p className='bet-p'>👇</p> </div>\n    </div>\n  );\n}\n\nfunction Cards(props){\n  const cards = props.cards;\n  const index = props.index;\n  var turnedCards = [];\n  for(let i = 0; i<index; i++){\n    const guess = (index > 0) ? props.guesses[i] : null;\n    turnedCards.push(\n      <TurnedCard \n        key = {i} \n        value= { cards[i] } \n        guess = { guess }\n      />);\n  }\n  const lastTurned = index < 0 ? \n    null : \n    (<LastTurned \n      value = { cards[index] } \n      outcome = { props.outcome } \n    />);\n\n  return (\n    <div className='cards'>\n      <Deck \n        onClick={(high)=>props.onClick(high)}\n      />\n      { turnedCards }\n      { lastTurned }\n      <div className='vbox'>\n        <p className='bet-p'> your money: { props.inGameMoney } </p>\n        <div className='btn' onClick={()=>props.collect()}>\n          <p className='bet-p'> collect </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Controls(props){\n  return(\n    <div className='vbox'>\n      <div className='hbox'>\n        <div className='btn' onClick={()=>props.newGame()}> \n          <p className='bet-p'> new game </p>\n        </div>\n        <p className='bet-p'> bet: { props.bet } </p>\n        <div className='btn' onClick={()=>props.incBet()}> \n          <p className='bet-p'> + </p>\n        </div>\n        <div className='btn' onClick={()=>props.decBet()}> \n          <p className='bet-p'> - </p>\n        </div>\n        <p className='bet-p'> total: { props.total } 💰</p>\n      </div>\n      <div className='btn' onClick={()=>props.reset()}>\n        <p className='bet-p'> reset </p>\n      </div>\n    </div>\n  )\n}\n\nclass GameCanvas extends React.Component {\n  componentDidMount(){\n    const img = this.refs.deckImg;\n    img.onload = () => {\n      this.draw_cards();\n    }\n  }\n\n  componentDidUpdate(){\n    this.clearCanvas();\n    this.draw_cards();\n  }\n\n  draw_cards(){\n    const cards = this.props.cards;\n    const index = this.props.index;\n    for(let i=0; i<= index; i++){\n      const y = (i > 0) ? (this.props.guesses[i-1] ? 0 : 10) : 0; \n      this.draw_card(cards[i], i*12, y);\n    }\n  }\n\n  clearCanvas(){\n    let ctx = this.refs.ref.getContext('2d');\n    ctx.clearRect(0, 0, this.refs.ref.width, this.refs.ref.height);\n  }\n\n  draw_card(CardNumber, DestinationX, DestinationY) {\n    let ctx = this.refs.ref.getContext('2d');\n\n    const sWidth = 64;\n    const sHeight = 96;\n    const wScale = 1;\n    const hScale = 1.5;\n    let sx = (CardNumber % 13) * sWidth;\n    let sy = Math.floor(CardNumber / 13) * sHeight;\n\n    ctx.drawImage(\n      this.refs.deckImg,\n      sx,\n      sy,\n      sWidth,\n      sHeight,\n      DestinationX,\n      DestinationY,\n      sWidth*wScale,\n      sHeight*hScale,\n    );\n  }\n  \n  render(){\n    return (\n      <div className='vbox'>\n        <canvas \n          ref='ref'\n          className='GameCanvas'\n        />\n        <img\n          ref='deckImg'\n          className='HiddenImage'\n          src={deckImage}\n          alt='deck'\n        />\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  deckClick(high){\n    if(this.props.inGameMoney === 0){\n      log_msg('start a new game', 'red');\n      return;\n    }\n    if(this.props.index >= 51){\n      log_msg('deck is empy, like this will ever happen!', 'green');\n      return;\n    }\n    const decider = (previous, current) => current !== previous && (current > previous) === high;\n    const pCard = this.props.cards[this.props.index] % 13;\n    const cCard = this.props.cards[this.props.index+1] % 13;\n\n    const outcome = decider(pCard, cCard);\n    this.props.setGlow(outcome, high);\n    this.props.updateBank(outcome);\n  }\n\n\n  render(){\n    return (\n      <div className='game'>\n        <div className='vbox'>\n          <Cards \n            index = { this.props.index }\n            cards = { this.props.cards }\n            outcome = { this.props.outcome }\n            onClick = { (high) => this.deckClick(high) }\n            collect = { () => this.props.collect() }\n            inGameMoney = { this.props.inGameMoney }\n            guesses = { this.props.guesses }\n          />\n        </div>\n        <GameCanvas\n          index = { this.props.index }\n          cards = { this.props.cards }\n          guesses = { this.props.guesses }\n        />\n        <Controls\n          bet = { this.props.bet }\n          total = { this.props.total }\n          incBet = { () => this.props.incBet() }\n          decBet = { () => this.props.decBet() }\n          reset = { () => this.props.reset() }\n          newGame = { () => this.props.newGame() }\n        />\n        <div className='logger-div' id='logger-div'>\n            <p className='logger-p' id='logger-p'> </p> \n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    index: state.index,\n    cards: state.cards,\n    bet: state.bet,\n    total: state.total,\n    outcome: state.outcome,\n    inGameMoney: state.inGameMoney,\n    guesses: state.guesses,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    reset: () => {\n      dispatch({\n        type: 'reset',\n      });\n    },\n    collect: () => {\n      dispatch({\n        type: 'collect',\n      });\n    },\n    doubleBet: () => {\n      dispatch({\n        type: 'doubleBet',\n      });\n    },\n    lost: () => {\n      dispatch({\n        type: 'lost',\n      });\n    },\n    newGame: () => {\n      dispatch({\n        type: 'newGame',\n      });\n    },\n    decBet: () => {\n      dispatch({\n        type: 'decBet',\n      });\n    },\n    incBet: () => {\n      dispatch({\n        type: 'incBet',\n      });\n    },\n    setGlow: (outcome, guess) => {\n      dispatch({\n        type: 'setGlow',\n        outcome: outcome,\n        guess: guess,\n      });\n    },\n    updateBank: (outcome) => {\n      dispatch({\n        type: 'updateBank',\n        outcome: outcome,\n      });\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\nimport {render} from 'react-dom';\nimport {createStore} from 'redux';\nimport {persistStore, persistReducer} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport {Provider} from 'react-redux';\nimport Game from './Game';\nimport { getShuffled, log_msg } from './Game';\nimport {PersistGate} from 'redux-persist/integration/react';\n\nconst reducer = (state = \n  {\n    index: -1,\n    bet: 10,\n    total: 90,\n    outcome: '',\n    guesses: [],\n  }, action) => {\n  switch(action.type){\n    case 'reset': {\n      state = {\n        ...state,\n        index: -1,\n        cards: getShuffled(),\n        bet: 10,\n        total: 90,\n        outcome: '',\n        inGameMoney: 0,\n        guesses: [],\n      };\n      break;\n    }\n    case 'collect': {\n      if(state.inGameMoney === 0){\n        log_msg('you have nothing to collect!', 'red');\n        break;\n      }\n      const total = state.total + state.inGameMoney;\n      state = {\n        ...state,\n        total: total,\n        inGameMoney: 0,\n      };\n      break;\n    }\n    case 'doubleBet': {\n      state = {\n        ...state,\n        inGameMoney: state.inGameMoney * 2,\n      };\n      break;\n    }\n    case 'lost': {\n      state = {\n        ...state,\n        inGameMoney: 0,\n      };\n      log_msg('you died', 'red');\n      break;\n    }\n    case 'newGame': {\n      const inGameMoney = state.bet;\n      if(inGameMoney === 0){\n        log_msg('minimum bet is 5', 'orange');\n        break;\n      }\n      state = {\n        ...state,\n        index: 0,\n        cards: getShuffled(),\n        inGameMoney: inGameMoney,\n        outcome: '',\n        bet: 0,\n        guesses: [],\n      };\n      break;\n    }\n    case 'decBet': {\n      if(state.bet <= 10) break;\n      state = {\n        ...state,\n        bet: state.bet + 5,\n        total: state.total - 5,\n      }; \n      break;\n    }\n    case 'incBet': {\n      const inc = state.total < 5 ? state.total : 5;\n      state = {\n        ...state,\n        bet: state.bet + inc,\n        total: state.total - inc,\n      }; \n      break;\n    }\n    case 'setGlow': {\n      state = {\n        ...state,\n        index: state.index + 1,\n        outcome: action.outcome ? 'green-glow' : 'red-glow',\n        guesses: state.guesses.concat([action.guess]),\n      }; \n      break;\n    }\n    case 'updateBank': {\n      if(action.outcome){\n        state = {\n          ...state,\n          inGameMoney: state.inGameMoney * 2,\n        }; \n      }\n      else{\n        state = {\n          ...state,\n          inGameMoney: 0,\n        }; \n      }\n      break;\n    }\n    default: ;\n  }\n  return state;\n};\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\nlet store = createStore(persistedReducer);\nlet persistor = persistStore(store);\n\nstore.subscribe(()=>{});\n\nrender(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Game />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}