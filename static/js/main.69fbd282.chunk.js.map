{"version":3,"sources":["index.js"],"names":["numToCard","n","value","text","suit","Math","floor","color","getShuffled","a","Array","keys","i","length","j","random","TurnedCard","props","p","className","style","LastTurned","cName","outcome","Deck","onClick","Cards","cards","index","turnedCards","push","key","high","Bets","bet","incBet","decBet","total","Game","state","inc","this","setState","console","log","previous","current","pCard","cCard","setTimeout","updateBank","deckClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.69fbd282.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport './index.css';\n\nfunction numToCard(n){\n  const values = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'];\n  const suits = ['❤', '♠', '♦','♣'];\n  const color = ['red', 'black', 'red', 'black'];\n  const card = {\n    value: n,\n    text: values[n%13],\n    suit: suits[Math.floor(n/13)],\n    color: color[Math.floor(n/13)],\n  };\n  return card;\n}\n\nfunction getShuffled(){\n  var a = [...Array(52).keys()];\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nfunction TurnedCard(props){\n  const p = numToCard(props.value);\n  return (\n    <div className='tcard'>\n      <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n      <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n    </div>\n  );\n}\n\nfunction LastTurned(props){\n  const p = numToCard(props.value);\n  const cName = 'lcard ' + props.outcome;\n  return (\n    <div className={cName}>\n      <div className='pipValue'>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n      </div>\n      <div className='pipValue upSideDown'>\n        <p className='card-p' style={{ color: p.color }}> { p.suit } </p>\n        <p className='card-p' style={{ color: p.color }}> { p.text } </p>\n      </div>\n    </div>\n  );\n}\n\nfunction Deck(props){\n  return(\n    <div className='deck'>\n      <div className='bet' onClick={()=>props.onClick(true)}> <p className='bet-p'>👆</p> </div>\n      <div className='bet' onClick={()=>props.onClick(false)}> <p className='bet-p'>👇</p> </div>\n    </div>\n  );\n}\n\nfunction Cards(props){\n  const cards = props.cards;\n  const index = props.index;\n  var turnedCards = [];\n  for(let i = 0; i<index; i++){\n    turnedCards.push(<TurnedCard key = {i} value= { cards[i] } />);\n  }\n\n  return (\n    <div className='cards'>\n      <Deck \n        onClick={(high)=>props.onClick(high)}\n      />\n      { turnedCards }\n      <LastTurned \n        value = { cards[index] } \n        outcome = { props.outcome }\n      />\n    </div>\n  );\n}\n\nfunction Bets(props){\n  return (\n    <div className='bets'>\n      <div className='hbox'>\n        <p className='bet-p'> bet: { props.bet } </p>\n        <div className='btn' onClick={()=>props.incBet()}> <p className='bet-p'> + </p></div>\n        <div className='btn' onClick={()=>props.decBet()}> <p className='bet-p'> - </p></div>\n      </div>\n      <div className='hbox'>\n        <p className='bet-p'> total: { props.total } 💰</p>\n      </div>\n    </div>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      index: 0,\n      cards: getShuffled(),\n      bet: 10,\n      total: 90,\n      outcome: '',\n    }\n  }\n\n  incBet(){\n    var inc = this.state.total < 5 ? this.state.total : 5;\n    this.setState({\n      bet: this.state.bet+inc,\n      total: this.state.total-inc,\n    });\n  }\n\n  decBet(){\n    if(this.state.bet <= 10){\n      return;\n    }\n    this.setState({\n      bet: this.state.bet-5,\n      total: this.state.total+5,\n    });\n  }\n\n  updateBank(outcome){\n    if(outcome){\n      this.setState({ \n        total: this.state.total+this.state.bet,\n      });\n    }\n    else{\n      this.setState({\n        index: 0,\n        cards: getShuffled(),\n        outcome: '',\n      })\n      var bet = this.state.bet;\n      var total = this.state.total;\n      if(total >= 2*bet){\n        this.setState({\n          total: total-bet,\n          bet: bet,\n        })\n      }\n      else if(total < 10){\n        this.setState({\n          total: total,\n          bet: 0,\n        })\n        console.log('minimum bet is 10');\n      }\n      else{\n        this.setState({\n          total: total-10,\n          bet: 10,\n        })\n      }\n    }\n  }\n\n  deckClick(high){\n    if(this.state.index >= 51){\n      console.log('deck is empy');\n      return;\n    }\n    const decider = (previous, current) => current !== previous && (current > previous) === high;\n    const pCard = this.state.cards[this.state.index] % 13;\n    const cCard = this.state.cards[this.state.index+1] % 13;\n\n    const outcome = decider(pCard, cCard);\n    console.log(outcome ? 'keep going' : 'unlucky');\n    this.setState({ \n      index: this.state.index + 1 ,\n      outcome: outcome ? 'green-glow' : 'red-glow',\n    });\n    setTimeout(()=>{this.updateBank(outcome)}, outcome ? 0 : 2000);\n  }\n\n  render(){\n    return (\n      <div className='game'>\n        <Cards \n          index = { this.state.index }\n          cards = { this.state.cards }\n          outcome = { this.state.outcome }\n          onClick={ (high) => this.deckClick(high) }\n        />\n        <Bets \n          bet = { this.state.bet }\n          total = { this.state.total }\n          incBet = { () => this.incBet() }\n          decBet = { () => this.decBet() }\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}